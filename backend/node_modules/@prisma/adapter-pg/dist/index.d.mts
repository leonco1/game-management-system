import type { ConnectionInfo } from '@prisma/driver-adapter-utils';
import pg from 'pg';
import type { SqlConnection } from '@prisma/driver-adapter-utils';
import type { SqlQuery } from '@prisma/driver-adapter-utils';
import type { SqlQueryable } from '@prisma/driver-adapter-utils';
import type { SqlResultSet } from '@prisma/driver-adapter-utils';
import type { TransactionContext } from '@prisma/driver-adapter-utils';

declare class PgQueryable<ClientT extends StdClient | TransactionClient> implements SqlQueryable {
    protected readonly client: ClientT;
    readonly provider = "postgres";
    readonly adapterName: string;
    constructor(client: ClientT);
    /**
     * Execute a query given as SQL, interpolating the given parameters.
     */
    queryRaw(query: SqlQuery): Promise<SqlResultSet>;
    /**
     * Execute a query given as SQL, interpolating the given parameters and
     * returning the number of affected rows.
     * Note: Queryable expects a u64, but napi.rs only supports u32.
     */
    executeRaw(query: SqlQuery): Promise<number>;
    /**
     * Run a query against the database, returning the result set.
     * Should the query fail due to a connection error, the connection is
     * marked as unhealthy.
     */
    private performIO;
    protected onError(error: any): never;
}

export declare class PrismaPg extends PgQueryable<StdClient> implements SqlConnection {
    private options?;
    private readonly release?;
    constructor(client: StdClient, options?: PrismaPgOptions | undefined, release?: (() => Promise<void>) | undefined);
    executeScript(script: string): Promise<void>;
    getConnectionInfo(): ConnectionInfo;
    transactionContext(): Promise<TransactionContext>;
    dispose(): Promise<void>;
}

declare type PrismaPgOptions = {
    schema?: string;
};

declare type StdClient = pg.Pool;

declare type TransactionClient = pg.PoolClient;

export { }
