{"ast":null,"code":"var _jsxFileName = \"/Users/leonidtrajkoski/Desktop/game-management-system/frontend/src/pages/NewDeveloper.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useApolloClient, useMutation } from \"@apollo/client\";\nimport DeveloperForm from \"../components/DeveloperForm\";\nimport client from \"../utils/apolloClient\";\nimport { gql } from \"@apollo/client\";\nimport { useActionData, useNavigate } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CREATE_NEW_DEVELOPER_MUTATION = gql`\nmutation createDeveloper($name: String!, $surname: String!, $userEmail: String!, $gameTitle: String!, $imageURL: String!, $gameGenre: String!) {\n  createDeveloper(name: $name, surname: $surname, email: $userEmail, gameTitle: $gameTitle, imageURL: $imageURL, gameGenre: $gameGenre) {\n    name\n    surname\n    userEmail\n    games {\n      title\n      genres {\n        name\n      }\n    }\n  }\n}\n`;\nfunction createDeveloper() {\n  _s();\n  const [newDeveloper, {\n    data\n  }] = useMutation(CREATE_NEW_DEVELOPER_MUTATION);\n}\n_s(createDeveloper, \"w6y2xNeCSQgZV6l5//MoDk+bhmY=\", false, function () {\n  return [useMutation];\n});\nexport default function NewDeveloperPage() {\n  _s2();\n  const data = useActionData();\n  const navigate = useNavigate();\n  const [createDeveloper, {\n    data: mutationData,\n    error\n  }] = useMutation(CREATE_NEW_DEVELOPER_MUTATION);\n  if (data) {}\n  return /*#__PURE__*/_jsxDEV(DeveloperForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 8\n  }, this);\n}\n_s2(NewDeveloperPage, \"jSiW1R3vXs3RMDnFLK1/FCHEvGM=\", false, function () {\n  return [useActionData, useNavigate, useMutation];\n});\n_c = NewDeveloperPage;\nexport async function action({\n  request\n}) {\n  const data = await request.formData();\n  const developerData = {\n    name: data.get(\"name\"),\n    surname: data.get(\"surname\"),\n    userEmail: data.get(\"email\"),\n    gameTitle: JSON.parse(data.get(\"game\")).title,\n    imageURL: JSON.parse(data.get(\"game\")).imageURL,\n    description: JSON.parse(data.get(\"game\")).description,\n    gameGenre: JSON.parse(data.get(\"game\")).genre\n  };\n  return developerData;\n}\nvar _c;\n$RefreshReg$(_c, \"NewDeveloperPage\");","map":{"version":3,"names":["useApolloClient","useMutation","DeveloperForm","client","gql","useActionData","useNavigate","jsxDEV","_jsxDEV","CREATE_NEW_DEVELOPER_MUTATION","createDeveloper","_s","newDeveloper","data","NewDeveloperPage","_s2","navigate","mutationData","error","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","request","formData","developerData","name","get","surname","userEmail","gameTitle","JSON","parse","title","imageURL","description","gameGenre","genre","$RefreshReg$"],"sources":["/Users/leonidtrajkoski/Desktop/game-management-system/frontend/src/pages/NewDeveloper.js"],"sourcesContent":["import { useApolloClient, useMutation } from \"@apollo/client\";\nimport DeveloperForm from \"../components/DeveloperForm\";\nimport client from \"../utils/apolloClient\";\nimport { gql } from \"@apollo/client\";\nimport { useActionData,useNavigate} from \"react-router\";\n\nconst CREATE_NEW_DEVELOPER_MUTATION=gql`\nmutation createDeveloper($name: String!, $surname: String!, $userEmail: String!, $gameTitle: String!, $imageURL: String!, $gameGenre: String!) {\n  createDeveloper(name: $name, surname: $surname, email: $userEmail, gameTitle: $gameTitle, imageURL: $imageURL, gameGenre: $gameGenre) {\n    name\n    surname\n    userEmail\n    games {\n      title\n      genres {\n        name\n      }\n    }\n  }\n}\n`\nfunction createDeveloper() {\n    const [newDeveloper, { data }] = useMutation(CREATE_NEW_DEVELOPER_MUTATION);\n}\n\nexport default function NewDeveloperPage()\n{\n    const data=useActionData()\n    const navigate = useNavigate();\n    const [createDeveloper, { data: mutationData, error }] = useMutation(CREATE_NEW_DEVELOPER_MUTATION);\n  \n    if(data)\n    {\n\n\n    }\nreturn <DeveloperForm/>\n\n}\n\nexport async function action({ request }) {\n\n    const data = await request.formData();\n    const developerData = {\n      name: data.get(\"name\"),\n      surname: data.get(\"surname\"),\n      userEmail: data.get(\"email\"),\n      gameTitle: JSON.parse(data.get(\"game\")).title,\n      imageURL: JSON.parse(data.get(\"game\")).imageURL,\n      description:JSON.parse(data.get(\"game\")).description,\n      gameGenre: JSON.parse(data.get(\"game\")).genre\n    };\n    return developerData\n    \n  }\n  "],"mappings":";;;AAAA,SAASA,eAAe,EAAEC,WAAW,QAAQ,gBAAgB;AAC7D,OAAOC,aAAa,MAAM,6BAA6B;AACvD,OAAOC,MAAM,MAAM,uBAAuB;AAC1C,SAASC,GAAG,QAAQ,gBAAgB;AACpC,SAASC,aAAa,EAACC,WAAW,QAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,MAAMC,6BAA6B,GAACL,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,SAASM,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAM,CAACC,YAAY,EAAE;IAAEC;EAAK,CAAC,CAAC,GAAGZ,WAAW,CAACQ,6BAA6B,CAAC;AAC/E;AAACE,EAAA,CAFQD,eAAe;EAAA,QACaT,WAAW;AAAA;AAGhD,eAAe,SAASa,gBAAgBA,CAAA,EACxC;EAAAC,GAAA;EACI,MAAMF,IAAI,GAACR,aAAa,CAAC,CAAC;EAC1B,MAAMW,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACI,eAAe,EAAE;IAAEG,IAAI,EAAEI,YAAY;IAAEC;EAAM,CAAC,CAAC,GAAGjB,WAAW,CAACQ,6BAA6B,CAAC;EAEnG,IAAGI,IAAI,EACP,CAGA;EACJ,oBAAOL,OAAA,CAACN,aAAa;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC;AAEvB;AAACP,GAAA,CAbuBD,gBAAgB;EAAA,QAEzBT,aAAa,EACPC,WAAW,EAC6BL,WAAW;AAAA;AAAAsB,EAAA,GAJhDT,gBAAgB;AAexC,OAAO,eAAeU,MAAMA,CAAC;EAAEC;AAAQ,CAAC,EAAE;EAEtC,MAAMZ,IAAI,GAAG,MAAMY,OAAO,CAACC,QAAQ,CAAC,CAAC;EACrC,MAAMC,aAAa,GAAG;IACpBC,IAAI,EAAEf,IAAI,CAACgB,GAAG,CAAC,MAAM,CAAC;IACtBC,OAAO,EAAEjB,IAAI,CAACgB,GAAG,CAAC,SAAS,CAAC;IAC5BE,SAAS,EAAElB,IAAI,CAACgB,GAAG,CAAC,OAAO,CAAC;IAC5BG,SAAS,EAAEC,IAAI,CAACC,KAAK,CAACrB,IAAI,CAACgB,GAAG,CAAC,MAAM,CAAC,CAAC,CAACM,KAAK;IAC7CC,QAAQ,EAAEH,IAAI,CAACC,KAAK,CAACrB,IAAI,CAACgB,GAAG,CAAC,MAAM,CAAC,CAAC,CAACO,QAAQ;IAC/CC,WAAW,EAACJ,IAAI,CAACC,KAAK,CAACrB,IAAI,CAACgB,GAAG,CAAC,MAAM,CAAC,CAAC,CAACQ,WAAW;IACpDC,SAAS,EAAEL,IAAI,CAACC,KAAK,CAACrB,IAAI,CAACgB,GAAG,CAAC,MAAM,CAAC,CAAC,CAACU;EAC1C,CAAC;EACD,OAAOZ,aAAa;AAEtB;AAAC,IAAAJ,EAAA;AAAAiB,YAAA,CAAAjB,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}