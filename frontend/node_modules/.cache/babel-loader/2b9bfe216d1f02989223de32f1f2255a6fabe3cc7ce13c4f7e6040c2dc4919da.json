{"ast":null,"code":"var _jsxFileName = \"/Users/leonidtrajkoski/Desktop/game-management-system/frontend/src/pages/NewDeveloper.js\",\n  _s = $RefreshSig$();\nimport { useApolloClient } from \"@apollo/client\";\nimport DeveloperForm from \"../components/DeveloperForm\";\nimport client from \"../utils/apolloClient\";\nimport { gql } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CREATE_NEW_DEVELOPER_MUTATION = gql`\nmutation createDeveloper($name: String!, $surname: String!, $userEmail: String!, $gameTitle: String!, $imageURL: String!, $gameGenre: String!) {\n  createDeveloper(name: $name, surname: $surname, email: $userEmail, gameTitle: $gameTitle, imageURL: $imageURL, gameGenre: $gameGenre) {\n    name\n    surname\n    userEmail\n    games {\n      title\n      genres {\n        name\n      }\n    }\n  }\n}\n`;\nexport default function NewDeveloperPage() {\n  _s();\n  const client = useApolloClient();\n  const action = ({\n    request,\n    params\n  }) => {\n    const data = request.formData();\n    const developerData = {\n      name: data.get(\"name\"),\n      surname: data.get(\"surname\"),\n      userEmail: data.get(\"email\"),\n      gameTitle: JSON.parse(data.get(\"game\")).title,\n      imageURL: JSON.parse(data.get(\"game\")).imageURL,\n      description: JSON.parse(data.get(\"game\")).description,\n      gameGenre: JSON.parse(data.get(\"game\")).genre\n    };\n    try {\n      const response = client.mutate({\n        mutation: CREATE_NEW_DEVELOPER_MUTATION,\n        variables: developerData\n      });\n      return response.data.createDeveloper;\n    } catch (error) {\n      console.error(\"Error creating developer:\", error);\n      return {\n        error: error.message\n      };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(DeveloperForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 8\n  }, this);\n}\n_s(NewDeveloperPage, \"bRce2qNAOkF4RDs+MXWx0he9v30=\", false, function () {\n  return [useApolloClient];\n});\n_c = NewDeveloperPage;\nvar _c;\n$RefreshReg$(_c, \"NewDeveloperPage\");","map":{"version":3,"names":["useApolloClient","DeveloperForm","client","gql","jsxDEV","_jsxDEV","CREATE_NEW_DEVELOPER_MUTATION","NewDeveloperPage","_s","action","request","params","data","formData","developerData","name","get","surname","userEmail","gameTitle","JSON","parse","title","imageURL","description","gameGenre","genre","response","mutate","mutation","variables","createDeveloper","error","console","message","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/leonidtrajkoski/Desktop/game-management-system/frontend/src/pages/NewDeveloper.js"],"sourcesContent":["import { useApolloClient } from \"@apollo/client\";\nimport DeveloperForm from \"../components/DeveloperForm\";\nimport client from \"../utils/apolloClient\";\nimport { gql } from \"@apollo/client\";\n\nconst CREATE_NEW_DEVELOPER_MUTATION=gql`\nmutation createDeveloper($name: String!, $surname: String!, $userEmail: String!, $gameTitle: String!, $imageURL: String!, $gameGenre: String!) {\n  createDeveloper(name: $name, surname: $surname, email: $userEmail, gameTitle: $gameTitle, imageURL: $imageURL, gameGenre: $gameGenre) {\n    name\n    surname\n    userEmail\n    games {\n      title\n      genres {\n        name\n      }\n    }\n  }\n}\n`\nexport default function NewDeveloperPage()\n{\n const client=useApolloClient()\n   const action=({ request,params })=> {\n\n    const data =  request.formData();\n    const developerData = {\n      name: data.get(\"name\"),\n      surname: data.get(\"surname\"),\n      userEmail: data.get(\"email\"),\n      gameTitle: JSON.parse(data.get(\"game\")).title,\n      imageURL: JSON.parse(data.get(\"game\")).imageURL,\n      description:JSON.parse(data.get(\"game\")).description,\n      gameGenre: JSON.parse(data.get(\"game\")).genre,\n    };\n    \n    try {\n      const response =  client.mutate({\n        mutation:(CREATE_NEW_DEVELOPER_MUTATION),\n        variables: developerData,\n      });\n      return response.data.createDeveloper;\n    } catch (error) {\n      console.error(\"Error creating developer:\", error);\n      return { error: error.message };\n    }\n  }\nreturn <DeveloperForm/>\n}\n\n  "],"mappings":";;AAAA,SAASA,eAAe,QAAQ,gBAAgB;AAChD,OAAOC,aAAa,MAAM,6BAA6B;AACvD,OAAOC,MAAM,MAAM,uBAAuB;AAC1C,SAASC,GAAG,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,6BAA6B,GAACH,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,eAAe,SAASI,gBAAgBA,CAAA,EACxC;EAAAC,EAAA;EACC,MAAMN,MAAM,GAACF,eAAe,CAAC,CAAC;EAC5B,MAAMS,MAAM,GAACA,CAAC;IAAEC,OAAO;IAACC;EAAO,CAAC,KAAI;IAEnC,MAAMC,IAAI,GAAIF,OAAO,CAACG,QAAQ,CAAC,CAAC;IAChC,MAAMC,aAAa,GAAG;MACpBC,IAAI,EAAEH,IAAI,CAACI,GAAG,CAAC,MAAM,CAAC;MACtBC,OAAO,EAAEL,IAAI,CAACI,GAAG,CAAC,SAAS,CAAC;MAC5BE,SAAS,EAAEN,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;MAC5BG,SAAS,EAAEC,IAAI,CAACC,KAAK,CAACT,IAAI,CAACI,GAAG,CAAC,MAAM,CAAC,CAAC,CAACM,KAAK;MAC7CC,QAAQ,EAAEH,IAAI,CAACC,KAAK,CAACT,IAAI,CAACI,GAAG,CAAC,MAAM,CAAC,CAAC,CAACO,QAAQ;MAC/CC,WAAW,EAACJ,IAAI,CAACC,KAAK,CAACT,IAAI,CAACI,GAAG,CAAC,MAAM,CAAC,CAAC,CAACQ,WAAW;MACpDC,SAAS,EAAEL,IAAI,CAACC,KAAK,CAACT,IAAI,CAACI,GAAG,CAAC,MAAM,CAAC,CAAC,CAACU;IAC1C,CAAC;IAED,IAAI;MACF,MAAMC,QAAQ,GAAIzB,MAAM,CAAC0B,MAAM,CAAC;QAC9BC,QAAQ,EAAEvB,6BAA8B;QACxCwB,SAAS,EAAEhB;MACb,CAAC,CAAC;MACF,OAAOa,QAAQ,CAACf,IAAI,CAACmB,eAAe;IACtC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,OAAO;QAAEA,KAAK,EAAEA,KAAK,CAACE;MAAQ,CAAC;IACjC;EACF,CAAC;EACH,oBAAO7B,OAAA,CAACJ,aAAa;IAAAkC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC;AACvB;AAAC9B,EAAA,CA5BuBD,gBAAgB;EAAA,QAE1BP,eAAe;AAAA;AAAAuC,EAAA,GAFLhC,gBAAgB;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}